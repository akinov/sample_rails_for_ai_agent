# 実行プロセス
1. タスクの実装に取り組む前に、タスクの要件を理解し、実行計画を作成し許可を得てください。
2. mainブランチでは作業せず、新しいブランチを作成してください。
  - ブランチ名は、`feature/` または `bugfix/` で始まり、続いて `#{現在のタイムスタンプ}-#{タスクの内容を簡潔に表現した英字}` とします。
3. タスクのステップに応じてgitコミットをしてください。
  - コミットメッセージは、`[cline] #{タスクの内容を簡潔に表現した説明}` とします。
4. タスクの実装が完了したら、mainブランチにマージリクエストを作成してください。

# 基本方針
## コミュニケーション基準
- 日本語でやり取りしたいです。
- 最初にタスクを実行する計画を作成し許可を得てから進行してください。
- 既存ロジックを許可なく削除しないでください。
- タスクを進めていく上で以下の状況に該当する場合には、後述の[テスト実行手順](#テスト実行手順)に従って、テストの実行もおこなってください
  - 開発対象のクラスにテストコードが存在する場合
  - テストコードを改修した場合
- テストが fail や error になった場合は、解決できるような改修を提案してください。

## ユーザーとの対話と適応行動
- タスク完了のために重要な情報が欠けている場合、フォローアップの質問をする
- プロジェクトの複雑さとユーザーの好みに基づいてアプローチを調整する
- やり取りを最小限に抑え、効率的なタスク完了に努める
- 重要な技術的決定を簡潔に提示し、ユーザーからのフィードバックを得る

## 要件定義とタスク理解
- タスクの要件が不明確な場合は、以下の観点から質問を行い、実装の前に合意を形成してください：
  1. 機能要件（実装すべき機能の範囲と期待される動作）
  2. 非機能要件（パフォーマンス、セキュリティ、保守性などの基準）
  3. 入力値と出力値の定義
  4. エラーハンドリングの基準

## 品質基準
- 提案するコードは以下の基準を満たしてください：
  1. 適切なコメント
    1. rubyの場合、YARD記法でコメントを記述
  2. 適切なエラーハンドリングの実装
  3. セキュリティベストプラクティスの適用
  4. パフォーマンスの最適化
  5. テストカバレッジの向上
  6. ドキュメントの整備

## 実行例
テスト実行コマンド：
```bash
bundle exec rspec path/to/test/code.rb
```
